class TrafficManager

types
    EventType = <HighTraffic> | <ExcessiveRetransmissions> | <UnauthorizedTraffic>

instance variables
    public traffic : map nat to set of Packet := {|->};
    public blockedTraffic : set of Packet := {};
    public eventManager : Event := new Event();
    public trafficThreshold : nat := 100; --paquetes por intervalo
    public retransmissionThreshold : real := 20.0; --significa que hasta un 20% de retransmisiones son aceptables
    public authorizedSources : set of token := {mk_token("192.168.1.1"), mk_token("192.168.1.2"), mk_token("192.168.1.3")};

operations
    public TrafficManager : nat * real ==> TrafficManager
    TrafficManager(umbralTrafico, umbralRetrasmision) == (
         trafficThreshold := umbralTrafico;
         retransmissionThreshold := umbralRetrasmision
    );

    public getEvent : () ==> set of EventType
    getEvent() == (
	return eventManager.getEvent();
    );

    public addPacket(p : Packet, timeInterval : nat) == (
        if timeInterval in set dom traffic then
	    traffic(timeInterval) := traffic(timeInterval) union {p}
	else (
	    traffic := traffic munion {timeInterval |-> {p}}
	);
    );

    public detectCriticalEvents(timeInterval: nat) == (
	if IncreaseTraffic(timeInterval) then
	    eventManager.createEvent(<HighTraffic>);
	if ExcessiveRetransmissions(timeInterval) then
	    eventManager.createEvent(<ExcessiveRetransmissions>);
	if UnauthorizedTraffic(timeInterval) then
	    eventManager.createEvent(<UnauthorizedTraffic>)
	
    );

    public isAuthorized : Packet ==> bool
    isAuthorized(p) == (
        return p.getSrc() in set authorizedSources
    );

    public isRetransmitted : Packet * nat ==> bool
    isRetransmitted(p, timeInterval) == (
        return exists q in set traffic(timeInterval) & p.getSrc() = q.getSrc() and p.getDest() = q.getDest() and p.getSeqNumb() = q.getSeqNumb()
    );

    public blockedPacket(p: Packet) == (
        blockedTraffic := blockedTraffic union {p};
    );

    public blockUnauthorizedTraffic(timeInterval : nat) == (
        for all p in set traffic(timeInterval) do
            if not isAuthorized(p) then
                blockedPacket(p)
    )
    pre timeInterval in set dom traffic;

    public addAuthorizedSource : token ==> ()
    addAuthorizedSource(ip) == (
        authorizedSources := authorizedSources union {ip}
    );

    public IncreaseTraffic : nat ==> bool
    IncreaseTraffic(timeInterval) == (
	return card traffic(timeInterval) > trafficThreshold;
    );

    public ExcessiveRetransmissions : nat ==> bool
    ExcessiveRetransmissions(timeInterval) == (
	let retransmitted = {p | p in set traffic(timeInterval) & isRetransmitted(p, timeInterval)} in
	let retransmissionRate = (card retransmitted / card traffic(timeInterval)) * 100 in
	return retransmissionRate > retransmissionThreshold
    );

    public UnauthorizedTraffic : nat ==> bool
    UnauthorizedTraffic(timeInterval) == (
	return exists p in set traffic(timeInterval) & not isAuthorized(p);
    );

end TrafficManager
